service: damage-report-plots-server-back

custom:
  arnRegionAccount:
      Fn::Join:
        - ':'
        - - ${self:provider.region}
          - Ref: 'AWS::AccountId'
  webpack:
    includeModules: true
  defaultStage: dev
  awsProfiles:
    dev: drp
    prod: drp

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, self:custom.defaultStage}
  region: us-west-2
  profile: ${self:custom.awsProfiles.${self:provider.stage}}
  memorySize: 256
  timeout: 10
  tracing: true

# TODO 一部commonに移す
  environment: 
    ARN_REGION_ACCOUNT: ${self:custom.arnRegionAccount}
    SNS_NOP: ${file(env.${self:provider.stage}.yml):snsNop}
    CLIENT_ORIGIN: ${file(env.${self:provider.stage}.yml):clientOrigin}
    
    GOOGLE_CLIENT_ID: ${file(.cred.${self:provider.stage}.yml):googleClientId}
    GOOGLE_CLIENT_SECRET: ${file(.cred.${self:provider.stage}.yml):googleClientSecret}
    GOOGLE_CALLBACK_URL_ME: ${file(env.${self:provider.stage}.yml):googleCallbackUrlMe}
    GOOGLE_CALLBACK_URL_JOB: ${file(env.${self:provider.stage}.yml):googleCallbackUrlJob}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*Item"
        - "dynamodb:Query"
      Resource:
        - Fn::Join:
          - ':'
          - - 'arn:aws:dynamodb'
            - ${self:custom.arnRegionAccount}
            - '*'
    - Effect: "Allow"
      Action:
        - "sqs:*"
      Resource:
        - Fn::Join:
          - ':'
          - - 'arn:aws:sqs'
            - ${self:custom.arnRegionAccount}
            - '*'
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource:
        - Fn::Join:
          - ':'
          - - 'arn:aws:sns'
            - ${self:custom.arnRegionAccount}
            - '*'
    - Effect: "Allow"
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"

plugins:
  - serverless-webpack
  - serverless-plugin-tracing

package:
  individually: false


functions:

  generateTicket:
    handler: handler.generateTicket
    events:
      - schedule:
          rate: rate(10 minutes)
          enabled: false
    environment:
      TICKET_GENERATE_UNIT: 200

  consumeTicket:
    handler: handler.consumeTicket
    events:
      - sns: drp-consume-ticket

  queueThreads:
    handler: handler.queueThreads
    events:
      - sns: drp-queue-threads
    environment:
      THREAD_FETCH_COUNT: 500  # gmailから読む最大スレッド数
      THREAD_QUEUE_ARRAY_SIZE: 50  # sqsメッセージ1件に含める最大スレッド数
    memorySize: 512

  queueReports:
    handler: handler.queueReports
    events:
      - sns: drp-queue-reports
    environment:
      THREAD_ARRAY_DEQUEUE_COUNT: 2 # sqsから読むスレッド配列の数
      THREAD_FETCH_COUNT: 50 # 1度のバッチ実行でgmailから読む最大スレッド数
    memorySize: 512
    timeout: 30

  appendReportsToSheets:
    handler: handler.appendReportsToSheets
    events:
      - sns: drp-append-reports-to-sheets
    environment:
      REPORTS_ARRAY_DEQUEUE_COUNT: 10 # sqsから読む最大メッセージ数
      REPORTS_BATCH_COUNT: 100 # 1度のリクエストでspreadsheetsへ書く最大メッセージ数
    memorySize: 256

  createSheets:
    handler: handler.createSheets
    events:
      - sns: drp-create-sheets

  checkSheetsExistence:
    handler: handler.checkSheetsExistence
    events:
      - sns: drp-check-sheets-existence

  queueJob:
    handler: handler.queueJob
    events:
      - sns: drp-queue-job
    environment:
      JOB_QUEUE_URL:
        Ref: JobQueue

  putJob:
    handler: handler.putJob
    events:
      - sns: drp-put-job

  finalizeJob:
    handler: handler.finalizeJob
    events:
      - sns: drp-finalize-job

  putAgent:
    handler: handler.putAgent
    events:
      - sns: drp-put-agent

  startJob:
    handler: handler.startJob
    events:
      - schedule:
          rate: rate(2 minutes)
          enabled: false
    environment:
      JOB_QUEUE_URL:
        Ref: JobQueue

  createAgentQueue:
    handler: handler.createAgentQueue
    events:
      - sns: drp-create-agent-queue

  deleteAgentQueue:
    handler: handler.deleteAgentQueue
    events:
      - sns: drp-delete-agent-queue
  
  signin:
    handler: handler.signin
    events:
      - http:
          path: api/signin
          method: post
          cors: true


resources:
  Resources:
    JobQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: JobQueue.fifo
        FifoQueue: true
        ContentBasedDeduplication: true

    JobTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: job
        AttributeDefinitions:
          - AttributeName: openId
            AttributeType: S
          - AttributeName: createTime
            AttributeType: N
        KeySchema:
          - AttributeName: openId
            KeyType: HASH
          - AttributeName: createTime
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    AgentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: agent
        AttributeDefinitions:
          - AttributeName: openId
            AttributeType: S
        KeySchema:
          - AttributeName: openId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    TicketTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ticket
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


    StaticResource:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: damage-report-plots-static
        WebsiteConfiguration:
          IndexDocument: index.html

