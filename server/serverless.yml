service: damage-report-plots

custom:
  arnRegionAccount:
      Fn::Join:
        - ':'
        - - ${self:provider.region}
          - Ref: 'AWS::AccountId'
  webpackIncludeModules: true
  googleClientId:     ${file(.cred.yml):googleClientId}
  googleClientSecret: ${file(.cred.yml):googleClientSecret}
  sessionSecret:      ${file(.cred.yml):sessionSecret}
  stretchSecret:      ${file(.cred.yml):stretchSecret}
  googleCallbackUrlMe:  'https://plots.run/auth/callback/me'
  # googleCallbackUrlMe:  'https://2u2eb8fiug.execute-api.us-west-2.amazonaws.com/dev/auth/callback/me'
  googleCallbackUrlJob:  'https://plots.run/auth/callback/job'
  serializerKey:      ${file(.cred.yml):serializerKey}
  serializerSecret:   ${file(.cred.yml):serializerSecret}

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-west-2
  profile: drp
  memorySize: 128
  timeout: 30
  tracing: true
  environment:
    ARN_REGION_ACCOUNT: ${self:custom.arnRegionAccount}
    SNS_NOP: 'true'

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*Item"
      Resource:
        - Fn::Join:
          - ':'
          - - 'arn:aws:dynamodb'
            - ${self:custom.arnRegionAccount}
            - '*'
    - Effect: "Allow"
      Action:
        - "sqs:*"
      Resource:
        - Fn::Join:
          - ':'
          - - 'arn:aws:sqs'
            - ${self:custom.arnRegionAccount}
            - '*'
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource:
        - Fn::Join:
          - ':'
          - - 'arn:aws:sns'
            - ${self:custom.arnRegionAccount}
            - '*'
    - Effect: "Allow"
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"

plugins:
  - serverless-webpack
  - serverless-plugin-tracing


functions:

  generateTicket:
    handler: handler.generateTicket
    events:
      - schedule:
          rate: rate(10 minutes)
          enabled: false
    environment:
      TICKET_GENERATE_UNIT: 200

  consumeTicket:
    handler: handler.consumeTicket
    events:
      - sns: drp-consume-ticket

  queueThreads:
    handler: handler.queueThreads
    memorySize: 192
    events:
      - sns: drp-queue-threads
    environment:
      THREAD_COUNT: 50  # gmailから読む最大スレッド数
      GOOGLE_CLIENT_ID: ${self:custom.googleClientId}
      GOOGLE_CLIENT_SECRET: ${self:custom.googleClientSecret}

  queueMails:
    handler: handler.queueMails
    memorySize: 192
    events:
      - sns: drp-queue-mails
    environment:
      THREAD_COUNT: 100 # sqsから読む最大スレッド数
      THREAD_BATCH_COUNT: 50 # 1度のバッチ実行でgmailから読む最大スレッド数
      GOOGLE_CLIENT_ID: ${self:custom.googleClientId}
      GOOGLE_CLIENT_SECRET: ${self:custom.googleClientSecret}

  parseMails:
    handler: handler.parseMails
    memorySize: 192
    events:
      - sns: drp-parse-mails
    environment:
      MAIL_COUNT: 100 # sqsから読む最大メール数

  insertReports:
    handler: handler.insertReports
    memorySize: 192
    events:
      - sns: drp-insert-reports
    environment:
      REPORTS_COUNT: 100 # sqsから読む最大レコード数
      REPORTS_BATCH_COUNT: 20 # 1度のバッチ実行でfusiontablesへ書く最大レコード数
      GOOGLE_CLIENT_ID: ${self:custom.googleClientId}
      GOOGLE_CLIENT_SECRET: ${self:custom.googleClientSecret}

  createTable:
    handler: handler.createTable
    events:
      - sns: drp-create-table
    environment:
      GOOGLE_CLIENT_ID: ${self:custom.googleClientId}
      GOOGLE_CLIENT_SECRET: ${self:custom.googleClientSecret}

  checkTable:
    handler: handler.checkTable
    events:
      - sns: drp-check-table
    environment:
      GOOGLE_CLIENT_ID: ${self:custom.googleClientId}
      GOOGLE_CLIENT_SECRET: ${self:custom.googleClientSecret}

  queueJob:
    handler: handler.queueJob
    events:
      - sns: drp-queue-job
    environment:
      JOB_QUEUE_URL:
        Ref: JobQueue

  putJob:
    handler: handler.putJob
    events:
      - sns: drp-put-job

  startJob:
    handler: handler.startJob
    events:
      - schedule:
          rate: rate(2 minutes)
          enabled: false
    environment:
      JOB_QUEUE_URL:
        Ref: JobQueue

  createAgentQueue:
    handler: handler.createAgentQueue
    events:
      - sns: drp-create-agent-queue

  deleteAgentQueue:
    handler: handler.deleteAgentQueue
    events:
      - sns: drp-delete-agent-queue



  front:
    handler: handler.proxy
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
    memorySize: 384
    environment:
      GOOGLE_CLIENT_ID: ${self:custom.googleClientId}
      GOOGLE_CLIENT_SECRET: ${self:custom.googleClientSecret}
      GOOGLE_CALLBACK_URL_ME:  ${self:custom.googleCallbackUrlMe}
      GOOGLE_CALLBACK_URL_JOB: ${self:custom.googleCallbackUrlJob}
      SESSION_SECRET: ${self:custom.sessionSecret}
      # STRETCH_SECRET: ${self:custom.stretchSecret}
      SERIALIZER_KEY:    ${self:custom.serializerKey}
      SERIALIZER_SECRET: ${self:custom.serializerSecret}


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    # TicketQueue:
    #   Type: AWS::SQS::Queue
    #   Properties:
    #     QueueName: TicketQueue
    #     MaximumMessageSize: 1024
    JobQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: JobQueue.fifo
        FifoQueue: true
        ContentBasedDeduplication: false

    JobTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: job
        AttributeDefinitions:
          - AttributeName: openId
            AttributeType: S
          - AttributeName: createTime
            AttributeType: N
        KeySchema:
          - AttributeName: openId
            KeyType: HASH
          - AttributeName: createTime
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    SessionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: session
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    AgentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: agent
        AttributeDefinitions:
          - AttributeName: openId
            AttributeType: S
        KeySchema:
          - AttributeName: openId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    TicketTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ticket
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


    StaticResource:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: damage-report-plots-static
        WebsiteConfiguration:
          IndexDocument: index.html

#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
